// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model question {
  id      Int     @id @default(autoincrement())
  content String?
}

model psq {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  report     String?  @db.Text
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
}

model User {
  id        String   @id @default(uuid())
  username  String?
  email     String   @unique
  phone     String   @unique
  role      Int?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Int?     @default(0)

  info String? @db.LongText

  type               Int?
  psqs               psq[] // 添加与 psq 模型关系字段的反向关系字段
  products           product[]
  userSchedules      schedule[]     @relation("UserSchedule")
  counselorSchedules schedule[]     @relation("CounselorSchedule")
  userTask           task[]         @relation("UserTask")
  counselorTask      task[]         @relation("CounselorTask")
  subtask_list       subtask_list[] @relation("SubTaskList")
  UserParent         parent[]       @relation("UserParent")
  ParentChild        parent[]       @relation("ParentChild")

  @@map("users")
}

model parent {
  id       String @id @default(uuid())
  userId   String @map("user_id")
  parentId String @map("parentId")
  parent   User   @relation("UserParent", fields: [parentId], references: [id])
  user     User   @relation("ParentChild", fields: [userId], references: [id])
}

model product {
  id          Int      @id @default(autoincrement())
  bankName    String?
  bankAccount String?
  bankNumber  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String
  username    String
  price       Float?
  //  
  status      Int      @default(0)
  // category=0 type对应的是学生的会员类型,  category=1 type对应的是顾问的等级
  type        Int

  userId       String         @map("user_id")
  User         User           @relation(fields: [userId], references: [id])
  productAudit productAudit[]
  //  学生会员审核(默认), 顾问级别审核
  category     Int            @default(0)
}

model productAudit {
  id           Int      @id @default(autoincrement())
  productId    Int      @map("product_id")
  Product      product  @relation(fields: [productId], references: [id])
  message      String?
  auditMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  attachment   String?  @db.LongText

  @@map("product_audit")
}

model schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Int?     @default(0)

  startTime      DateTime
  endTime        DateTime
  //  1: 未预约, 2:已经预约 3:学生取消了预约 4:顾问取消了预约
  status         Int      @default(0)
  remark         String?
  //  老师已就位
  counselorReady Int?     @default(0)
  //  学生已就位
  userReady      Int?     @default(0)

  userId        String?         @map("user_id")
  counselorId   String          @map("counselor_id")
  user          User?           @relation("UserSchedule", fields: [userId], references: [id])
  counselor     User            @relation("CounselorSchedule", fields: [counselorId], references: [id])
  scheduleAudit scheduleAudit[]
}

model scheduleAudit {
  id           Int      @id @default(autoincrement())
  scheduleId   Int      @map("schedule_id")
  message      String?
  auditMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  attachment   String?  @db.LongText
  schedule     schedule @relation(fields: [scheduleId], references: [id])

  @@map("schedule_audit")
}

model taskTarget {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Int?     @default(0)

  remark String? @db.LongText
  userId String? @map("user_id")
  task   task[]
}

model task {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDeleted    Int?      @default(0)
  title        String
  remark       String?
  status       String //  0=待开始, 1=进行中, 2=已完成, 3=中断任务
  userId       String?   @map("user_id")
  counselorId  String    @map("counselor_id")
  user         User?     @relation("UserTask", fields: [userId], references: [id])
  counselor    User      @relation("CounselorTask", fields: [counselorId], references: [id])
  subtask      subtask[]
  createUserId String

  taskTargetId Int?
  taskTarget   taskTarget? @relation(fields: [taskTargetId], references: [id])
}

model subtask {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Int?     @default(0)
  createUserId String

  title         String //  标题
  requireRemark String //  要求描述
  remark        String //描述
  targetRemark  String //  任务目标

  status     String //  0=待开始, 1=进行中, 2=已完成, 3=中断任务
  isDisabled Int?     @default(1) // 1=正常 2=禁用  
  startTime  DateTime
  endTime    DateTime
  task       task     @relation(fields: [taskId], references: [id])
  taskId     Int
  list       String?  @db.LongText //  附件

  subtask_list subtask_list[]
}

// model subtask_service_list {
//   id           Int      @id @default(autoincrement())
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   isDeleted    Int?     @default(0)
//   createUserId String

//   title      String
//   remark     String
//   attachment String? @db.LongText //  附件

//   subtaskId   String
//   subtaskList subtask_list[]
// }

model subtask_list {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Int?     @default(0)

  subtask    subtask @relation(fields: [subtaskId], references: [id])
  subtaskId  Int
  attachment String? @db.LongText //  附件

  userId String? @map("user_id")
  user   User?   @relation("SubTaskList", fields: [userId], references: [id])
  remark String?
}
